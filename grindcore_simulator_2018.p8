pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
state = 0 // menu

function _init()
 palt(11, true)
 palt(0, false)
end

function _update()
	keep_time()

	if state == 0 then
		update_menu()
	elseif state == 1 or 
	       state == 2 then
		update_game()
	end
end

function _draw()
	if state == 0 then
		draw_menu()
	elseif state == 1 or
	       state == 2 then
		draw_game()
	end
end

-->8
// utils
t = 0

function make_actor(sprite, x, y, map_flag)
	local actor = {}

 actor.map_flag = map_flag
	actor.sprite = sprite
	actor.position_x = x
	actor.position_y = y
	actor.hitbox_x = 5
	actor.hitbox_y = 13
	actor.hitbox_width = 5
	actor.hitbox_height = 2
	actor.velocity_x = 0
	actor.velocity_y = 0
	actor.other_actors = {}
	
	actor.set_position = function(x, y)
	 actor.position_x = x
	 actor.position_y = y
	 
	 actor.box_min_x = actor.position_x +
   actor.hitbox_x +
   actor.velocity_x
  
 	actor.box_min_y = actor.position_y +
   actor.hitbox_height +
   actor.hitbox_y +
   actor.velocity_y
	
 	actor.box_max_x = actor.position_x +
   actor.hitbox_width +
   actor.hitbox_x +
   actor.velocity_x
   
	 actor.box_max_y = actor.position_y +
   actor.hitbox_y +
   actor.velocity_y
	end
	
	return actor
end

function get_random_actor_sprite()
 return flr(rnd(6)) * 2 + 32
end

function keep_time()
	t += 1;
	if t > 63 then
		t = 0
	end
end

function big_spr(sprite, x, y)
	spr(sprite, x, y)
	spr(sprite + 1, x + 8, y)
	spr(sprite + 16, x, y + 8)
	spr(sprite + 17, x + 8, y + 8)
end
-->8
// menu
menu = {}
menu.title_position = 0

function update_menu()
 if btn(4) then
 	state = 1
 	init_game()
 end
end

function draw_menu()
	cls(1)

	if menu.title_position != 63 then
	 menu.title_position += 1
	end

	print(
	 "grindcore simulator 2018",
	 16,
	 menu.title_position,
	 8
	)

	if menu.title_position == 63 then
	 if flr(t / 8) % 2 == 0  then
 	 print("press \x8e (default z) to start", 6, 78)
	 end
	 
	 print("no goals, score or tutorial yet", 2, 90)
 end
end
-->8
// game
gameplay_on = true

score = 1000
initial_song_frames = -150
song_frames = initial_song_frames

crowd = {}
actors = {}
scene = {}

player = make_actor(64, 56, 64)
player.velocity_x = 0
player.velocity_y = 0
player.set_position(56, 64)

add(actors, player)
 
add(scene, make_actor(128, 45, 20))
add(scene, make_actor(130, 80, 17))
add(scene, make_actor(132, 70, 10))
add(scene, make_actor(5, 100, 10))

for actor in all(scene) do
 actor.set_position(actor.position_x, actor.position_y)
 add(actors, actor)
end

function init_crowd()
 local index = 0
 for y = 1, 8 do
	 for x = 1, 13 do
	  if rnd(100) > 26 and
	     (
	      x < 5 or x > 9 or
 	     y < 3 or y > 5
 	    ) then
 	  local actor = make_actor(
   	 get_random_actor_sprite(),
   	 x * 8,
   	 y * 8 + 36
   	)
   	actor.set_position(x * 8, y * 8 + 36)
   	add(crowd, actor)
   	add(actors, actor)
   end
 	end
 end
 
 for actor in all(crowd) do
  for a in all(crowd) do
   if actor != a then
    add(actor.other_actors, a)
   end
  end
 end
end

function update_crowd()
 for actor in all(crowd) do
  if is_map_collision_x(actor, 0) then
  		actor.velocity_x *= -1
  	else
    actor.set_position(
     actor.position_x + actor.velocity_x,
     actor.position_y
    )
  end
  
  if is_map_collision_y(actor, 0) then
  		actor.velocity_y *= -1
  	else
    actor.set_position(
     actor.position_x,
     actor.position_y + actor.velocity_y
    ) 
  end

  if group_collision(actor, crowd) then
   actor.velocity_x *= -1
   actor.velocity_y *= -1
  end
 end
end

function update_player()
 // todo refactoring
 collision = group_collision(player, crowd) or
  group_collision(player, scene)

 if collision then
 	score -= 10
 end

 if btn(0) then
 	player.velocity_x = -1
 	
 	// todo: collision_x collision_y
 	// to slide across the collision?
 	if collision then
 	 player.set_position(
  	 player.position_x - player.velocity_x,
  	 player.position_y
  	)
 	end
 	
  if not (
   is_map_collision_x(player, 1)
  ) then
  	player.set_position(
  	 player.position_x + player.velocity_x,
  	 player.position_y
  	)
  end
 end
 
 if btn(1) then
 	player.velocity_x = 1
 	
 	if collision then
 	 player.set_position(
  	 player.position_x - player.velocity_x,
  	 player.position_y
  	)
 	end
 	
  if not (
   is_map_collision_x(player, 1)
  ) then
  	player.set_position(
  	 player.position_x + player.velocity_x,
  	 player.position_y
  	)
  end
 end
 
 if btn(2) then
  player.velocity_y = -1
  
  if collision then
 	 player.set_position(
  	 player.position_x,
  	 player.position_y - player.velocity_y
  	)
 	end
 	
  if not ( 
   is_map_collision_y(player, 1)
  ) then
  	player.set_position(
  	 player.position_x,
  	 player.position_y + player.velocity_y
  	)
  end
 end
 
 if btn(3) then
  player.velocity_y = 1
  
  if collision then
 	 player.set_position(
   	player.position_x,
   	player.position_y - player.velocity_y
   )
 	end
 	
  if not ( 
   is_map_collision_y(player, 1)
  ) then
  	player.set_position(
   	player.position_x,
   	player.position_y + player.velocity_y
   )
  end
 end
end

function init_game()
	init_crowd()
end

function update_game()
 song_frames += 1
 if song_frames == 0 and gameplay_on then
  state = 2
  
  for actor in all(crowd) do
   actor.velocity_x = flr(rnd(2)) - 1
   actor.velocity_y = flr(rnd(2)) - 1
  end
 end
 
 if song_frames == 300 then
  state = 1
  song_frames = initial_song_frames
  
  for actor in all(crowd) do
   actor.velocity_x = 0
   actor.velocity_y = 0
  end
 end
 
 update_crowd()
 update_band()
 update_player()
end

function update_band()
 if state == 2 then
  for actor in all(scene) do
   actor.velocity_x = rnd(2) - 1
   actor.velocity_y = rnd(2) - 1
   
   if not ( 
    is_map_collision_x(actor, 2) and
    is_map_collision_y(actor, 2)
   ) then 
    actor.set_position(
     actor.position_x + actor.velocity_x,
     actor.position_y + actor.velocity_y
    )
   end
  end
 end
end

function draw_game()
 cls(13)
	map(0, 0, 0, 0, 128, 128)

 // crowd
 sort(actors)
	for actor in all(actors) do
	 big_spr(
	  actor.sprite,
	  actor.position_x,
	  actor.position_y
	 )
	end
	
	print(flr(song_frames / 30), 0, 8, 11)
	print("score: " .. score, 0, 0)
end
-->8
// collisions

// todo: remove in favor
// of actor fields
function get_hitbox_left(actor) 
 return actor.position_x +
  actor.hitbox_x +
  actor.velocity_x
end
 
function get_hitbox_right(actor)
 return actor.position_x +
  actor.hitbox_width +
  actor.hitbox_x +
  actor.velocity_x
end
 
function get_hitbox_up(actor)
 return actor.position_y +
  actor.hitbox_y +
  actor.velocity_y
end

function get_hitbox_down(actor)
 return actor.position_y +
  actor.hitbox_height +
  actor.hitbox_y +
  actor.velocity_y
end

// todo: refactoring using
// actor fields
function is_map_collision_x(actor, flag)
 local collision_left = fget(
  mget(
   flr(get_hitbox_left(actor) / 8),
   flr((
    actor.position_y +
    actor.hitbox_y
   ) / 8)
  ),
  flag
 )

 local collision_right = fget(
  mget(
   flr(get_hitbox_right(actor) / 8),
   flr((
    actor.position_y +
    actor.hitbox_y
   ) / 8)
  ),
  flag
 )

 return collision_left or
 	collision_right
end

function is_map_collision_y(actor, flag)
 local collision_up = fget(
  mget(
   flr((
	   actor.position_x +
	   actor.hitbox_x
   ) / 8),
   flr(get_hitbox_up(actor) / 8)
  ),
  flag
 )

 local collision_down = fget(
  mget(
   flr((
	   actor.position_x +
	   actor.hitbox_x
   ) / 8),
   flr(get_hitbox_down(actor) / 8)
  ),
  flag
 )

 return collision_up or
 	collision_down
end

function group_collision(actor, group)
 result1 = false
 result2 = false
 result3 = false
 result4 = false
 
 local actor_box_min_x = actor.box_min_x
 local actor_box_max_x = actor.box_max_x
 local actor_box_min_y = actor.box_min_y
 local actor_box_max_y = actor.box_max_y

 for a in all(group) do
  if (a == actor) then
   break
  end
  
  local a_box_min_x = a.box_min_x
  result1 = actor_box_max_x < a_box_min_x

  local a_box_max_x = a.box_max_x
  result2 = actor_box_min_x > a_box_max_x
  
  local a_box_min_y = a.box_min_y
  result3 = actor_box_max_y < a_box_min_y
  
  local a_box_max_y = a.box_max_y
  result4 = actor_box_min_y > a_box_max_y
 
  if (not result1 and not result2 and result3 and result4) then
   break
  end
 end

 return (not result1 and not result2 and result3 and result4)
end
-->8
// for drawing actors in layers
function sort (data)
 local n = #data

 -- form a max heap
 for i = flr(n / 2) + 1, 1, -1 do
  -- m is the index of the max child
  local parent, value, m = i, data[i], i + i
  local key = value.position_y 

  while m <= n do
   -- find the max child
   if ((m < n) and (data[m + 1].position_y > data[m].position_y)) m += 1
   local mval = data[m]
   if (key > mval.position_y) break
   data[parent] = mval
   parent = m
   m += m
  end
  data[parent] = value
 end 

 -- read out the values,
 -- restoring the heap property
 -- after each step
 for i = n, 2, -1 do
  -- swap root with last
  local value = data[i]
  data[i], data[1] = data[1], value

  -- restore the heap
  local parent, terminate, m = 1, i - 1, 2
  local key = value.position_y 

  while m <= terminate do
   local mval = data[m]
   local mkey = mval.position_y
   if (m < terminate) and (data[m + 1].position_y > mkey) then
    m += 1
    mval = data[m]
    mkey = mval.position_y
   end
   if (key > mkey) break
   data[parent] = mval
   parent = m
   m += m
  end  

  data[parent] = value
 end
end
__gfx__
0000000082888888dddddddddddddddddddddddd9999999999999999555555555555555500000000000000000000000000000000000000000000000000000000
00000000828888885555555555555555dddddddd9999999999999999555555555555555500000000000000000000000000000000000000000000000000000000
007007008288888855555555dddddddddddddddd99aaaaaaaaaaaa99550000000000005500000000000000000000000000000000000000000000000000000000
000770002222222255555555dddddddddddddddd99a8aaa4a4a4aa99550000000000005500000000000000000000000000000000000000000000000000000000
00077000888888285555555555555555dddddddd9999999999999999550000000000005500000000000000000000000000000000000000000000000000000000
007007008888882855555555dddddddddddddddd9999999999999999550000000000005500000000000000000000000000000000000000000000000000000000
000000008888882855555555dddddddddddddddd9900000000000099550000000000005500000000000000000000000000000000000000000000000000000000
00000000222222225555555555555555dddddddd9900000000000099550000000000005500000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000009900000000000099550000000000005500000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000009900000000000099550000000000005500000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000009900000000000099550000000000005500000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000009900000000000099550000000000005500000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000009900000000000099550000000000005500000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000009900000000000099550000000000005500000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000009999999999999999555555555555555500000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000009999999999999999555555555555555500000000000000000000000000000000000000000000000000000000
bbbbbbb44bbbbbbbbbbbbbb88bbbbbbbbbbbbbb44bbbbbbbbbbbbbb55bbbbbbbbbbbbbb44bbbbbbbbbbbbb4444bbbbbb00000000000000000000000000000000
bbbbbbbffbbbbbbbbbbbbbbffbbbbbbbbbbbbb4ff4bbbbbbbbbbbbbffbbbbbbbbbbbbbb44bbbbbbbbbbbb44ff44bbbbb00000000000000000000000000000000
bbbbbbbffbbbbbbbbbbbbbbffbbbbbbbbbbbbb4ff4bbbbbbbbbbbbbffbbbbbbbbbbbbbb44bbbbbbbbbbbb44ff44bbbbb00000000000000000000000000000000
bbbbb888888bbbbbbbbbbffffffbbbbbbbbbb545545bbbbbbbbbbf9559fbbbbbbbbbb555555bbbbbbbbbb44ff44bbbbb00000000000000000000000000000000
bbbbb888888bbbbbbbbbbffffffbbbbbbbbbb545545bbbbbbbbbbf9559fbbbbbbbbbb555555bbbbbbbbbbf5555fbbbbb00000000000000000000000000000000
bbbbbf8888fbbbbbbbbbbffffffbbbbbbbbbbf5555fbbbbbbbbbbf9999fbbbbbbbbbb455554bbbbbbbbbbf5555fbbbbb00000000000000000000000000000000
bbbbbf8888fbbbbbbbbbbffffffbbbbbbbbbbf5555fbbbbbbbbbbf9999fbbbbbbbbbb455554bbbbbbbbbbf5555fbbbbb00000000000000000000000000000000
bbbbbf8888fbbbbbbbbbbffffffbbbbbbbbbbf5555fbbbbbbbbbbf9999fbbbbbbbbbb455554bbbbbbbbbbf5555fbbbbb00000000000000000000000000000000
bbbbbf8888fbbbbbbbbbbffffffbbbbbbbbbbf5555fbbbbbbbbbbf9999fbbbbbbbbbb455554bbbbbbbbbbf5555fbbbbb00000000000000000000000000000000
bbbbbf1111fbbbbbbbbbbf1111fbbbbbbbbbbf1111fbbbbbbbbbbf5353fbbbbbbbbbb433334bbbbbbbbbbf5555fbbbbb00000000000000000000000000000000
bbbbbb1111bbbbbbbbbbbb1111bbbbbbbbbbbb1111bbbbbbbbbbbb3535bbbbbbbbbbbb3bb3bbbbbbbbbbbb5555bbbbbb00000000000000000000000000000000
bbbbbb1bb1bbbbbbbbbbbb1bb1bbbbbbbbbbbb1bb1bbbbbbbbbbbb5bb3bbbbbbbbbbbb3bb3bbbbbbbbbbbb5555bbbbbb00000000000000000000000000000000
bbbbbb1bb1bbbbbbbbbbbb1bb1bbbbbbbbbbbb1bb1bbbbbbbbbbbbfbbfbbbbbbbbbbbb3bb3bbbbbbbbbbbb5555bbbbbb00000000000000000000000000000000
bbbbbb1bb1bbbbbbbbbbbbfbbfbbbbbbbbbbbb1bb1bbbbbbbbbbbbfbbfbbbbbbbbbbbb3bb3bbbbbbbbbbbb5555bbbbbb00000000000000000000000000000000
bbbbbb1bb1bbbbbbbbbbbbfbbfbbbbbbbbbbbb1bb1bbbbbbbbbbbbfbbfbbbbbbbbbbbb3bb3bbbbbbbbbbbb5555bbbbbb00000000000000000000000000000000
bbbbbb1bb1bbbbbbbbbbbbfbbfbbbbbbbbbbbb1bb1bbbbbbbbbbbbfbbfbbbbbbbbbbbb3bb3bbbbbbbbbbbb5555bbbbbb00000000000000000000000000000000
bbbbbbb88bbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbb8888bbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbffbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbeeeebbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbeeeeeebbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbfeeeefbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbfeeeefbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbfeeeefbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbfeeeefbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbfccccfbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbccccbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbcbbcbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbcbbcbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbcbbcbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbcbbcbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbcbbcbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbb44bbbbbbbbbbbbbbffbbbbbbbbbbbbbb99bbbbbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbb4ff4bbbbbbbbbbbbbffbbbbbbbbbbbbb9999bbbbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbb44ff44bbbbbbbbbbffffffbbbbbbbbbbb9ff9baaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbb44ff44bbbbbbbbbffffffffbbbbbbbbbb9ff9bbb6bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbb22225222bbbbbbbfffffffffbbbb9bbbf559955fb6bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbb2222f222bbbbbbbff88ff88ffbbbb9bff559955bf6bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bfbfff225fffbbbbbbbbff8888bbffbbbbfb4449444bf6bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbfffb2222fbbbbbbbbb8ff884444444aaa94446444fb6bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbb2222bbbbbbbbbb888888bbbffbb6bbb56464bbb6bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbb1111bbbbbbbbbbb885588bbbbbb6bbb455554bb6bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbb1111bbbbbbbbbbbb5bb5bbbbbbb6bb45555554b6bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbb1bb1bbbbbbbbbbbb5bb5bbbbbbb6bb45555554b6bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbb1bb1bbbbbbbbbbbb5bb5bbbbbbb6bb45551154b6bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbb1bb1bbbbbbbbbbbbfbbfbbbbbbb6bb45551154b6bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbb1bb1bbbbbbbbbbbbfbbfbbbbbbb6bbb455554bb6bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbb1bb1bbbbbbbbbbbbfbbfbbbbbb6b6bbb4444bb6b6b00000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0007070501000000000000000000000000000000000303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0104040404040404040404040404040100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0104040404040404040404040404040100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0104040404040404040404040404040100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0104040404040404040404040404040100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0103020202020202020202020202020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
